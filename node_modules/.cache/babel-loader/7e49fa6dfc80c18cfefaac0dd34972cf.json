{"ast":null,"code":"import Movies from \"../data/movies.json\";\n\nfunction sortByYear() {\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  return moviesList.sort((a, b) => a.Year > b.Year ? 1 : -1);\n}\n\nfunction sortByTitle() {\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  return moviesList.sort((a, b) => a.Title > b.Title ? 1 : -1);\n}\n\nfunction getYearsList() {\n  const yearsList = [];\n  const moviesList = sortByYear();\n  moviesList.forEach(movie => {\n    const year = yearsList.find(year => {\n      return year.Year === movie.Year;\n    });\n\n    if (year) {\n      year.Total += 1;\n    } else {\n      const newYearObject = {\n        Year: movie.Year,\n        Total: 1\n      };\n      yearsList.push(newYearObject);\n    }\n  });\n  return yearsList;\n}\n\nfunction sortYearsByMoviesWatched() {\n  const numbersByYear = getYearsList(); // const arrayOfEntries = Object.entries(numbersByYear);\n\n  return numbersByYear.sort((a, b) => a.Total > b.Total ? 1 : -1);\n}\n\nexport { sortByYear, sortByTitle, sortYearsByMoviesWatched, getYearsList };","map":{"version":3,"sources":["C:/Users/sidepiece/WebstormProjects/horror-binge-2020/src/services/movieListHelpers.tsx"],"names":["Movies","sortByYear","MoviesResponse","moviesList","sort","a","b","Year","sortByTitle","Title","getYearsList","yearsList","forEach","movie","year","find","Total","newYearObject","push","sortYearsByMoviesWatched","numbersByYear"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,qBAAnB;;AAGA,SAASC,UAAT,GAAoC;AAChC,QAAMC,cAA0B,GAAGF,MAAnC;AACA,QAAMG,UAAyB,GAAGD,cAAc,CAACF,MAAjD;AACA,SAAOG,UAAU,CAACC,IAAX,CAAgB,CAACC,CAAD,EAAiBC,CAAjB,KAAqCD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAZ,GAAoB,CAApB,GAAwB,CAAC,CAA7E,CAAP;AACH;;AAED,SAASC,WAAT,GAAsC;AAClC,QAAMN,cAA0B,GAAGF,MAAnC;AACA,QAAMG,UAAyB,GAAGD,cAAc,CAACF,MAAjD;AACA,SAAOG,UAAU,CAACC,IAAX,CAAgB,CAACC,CAAD,EAAiBC,CAAjB,KAAqCD,CAAC,CAACI,KAAF,GAAUH,CAAC,CAACG,KAAb,GAAsB,CAAtB,GAA0B,CAAC,CAA/E,CAAP;AACH;;AAED,SAASC,YAAT,GAAsC;AAClC,QAAMC,SAAuB,GAAG,EAAhC;AAEA,QAAMR,UAAyB,GAAGF,UAAU,EAA5C;AAEAE,EAAAA,UAAU,CAACS,OAAX,CAAoBC,KAAD,IAAwB;AACvC,UAAMC,IAAI,GAAGH,SAAS,CAACI,IAAV,CAAiBD,IAAD,IAAsB;AAAC,aAAOA,IAAI,CAACP,IAAL,KAAcM,KAAK,CAACN,IAA3B;AAAgC,KAAvE,CAAb;;AAEA,QAAGO,IAAH,EAAS;AACLA,MAAAA,IAAI,CAACE,KAAL,IAAc,CAAd;AACH,KAFD,MAEO;AACJ,YAAMC,aAAyB,GAAG;AAC9BV,QAAAA,IAAI,EAAEM,KAAK,CAACN,IADkB;AAE9BS,QAAAA,KAAK,EAAE;AAFuB,OAAlC;AAIAL,MAAAA,SAAS,CAACO,IAAV,CAAeD,aAAf;AACF;AACJ,GAZD;AAcA,SAAON,SAAP;AACH;;AAED,SAASQ,wBAAT,GAAoC;AAChC,QAAMC,aAA2B,GAAGV,YAAY,EAAhD,CADgC,CAGhC;;AAEA,SAAOU,aAAa,CAAChB,IAAd,CAAmB,CAACC,CAAD,EAAeC,CAAf,KAAiCD,CAAC,CAACW,KAAF,GAAUV,CAAC,CAACU,KAAb,GAAsB,CAAtB,GAA0B,CAAC,CAA9E,CAAP;AACH;;AAID,SAAQf,UAAR,EAAoBO,WAApB,EAAiCW,wBAAjC,EAA2DT,YAA3D","sourcesContent":["import Movies from \"../data/movies.json\";\nimport {MovieObject, MoviesList, YearObject} from \"../models/movieModels\";\n\nfunction sortByYear(): MovieObject[]{\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n    return moviesList.sort((a: MovieObject, b: MovieObject) => (a.Year > b.Year) ? 1 : -1);\n}\n\nfunction sortByTitle(): MovieObject[] {\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n    return moviesList.sort((a: MovieObject, b: MovieObject) => (a.Title > b.Title) ? 1 : -1);\n}\n\nfunction getYearsList(): YearObject[] {\n    const yearsList: YearObject[] = [];\n\n    const moviesList: MovieObject[] = sortByYear();\n\n    moviesList.forEach((movie: MovieObject) => {\n        const year = yearsList.find(((year: YearObject) => {return year.Year === movie.Year}));\n\n        if(year) {\n            year.Total += 1;\n        } else {\n           const newYearObject: YearObject = {\n               Year: movie.Year,\n               Total: 1\n           } ;\n           yearsList.push(newYearObject);\n        }\n    });\n\n    return yearsList;\n}\n\nfunction sortYearsByMoviesWatched() {\n    const numbersByYear: YearObject[] = getYearsList();\n\n    // const arrayOfEntries = Object.entries(numbersByYear);\n\n    return numbersByYear.sort((a: YearObject,b:YearObject) => (a.Total > b.Total) ? 1 : -1);\n}\n\n\n\nexport {sortByYear, sortByTitle, sortYearsByMoviesWatched, getYearsList};"]},"metadata":{},"sourceType":"module"}