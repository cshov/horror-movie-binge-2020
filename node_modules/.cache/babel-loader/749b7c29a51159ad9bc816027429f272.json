{"ast":null,"code":"import Movies from \"../data/movies.json\";\n\nfunction getDaysLeft() {\n  const CurrentDate = new Date();\n  const TDay = new Date(2020, 11, 31); // @ts-ignore\n\n  const timeDiff = TDay - CurrentDate;\n  const millisecondsPerDay = 1000 * 60 * 60 * 24;\n  const DayCount = timeDiff / millisecondsPerDay;\n  return Math.round(DayCount);\n}\n\nfunction getNumberMovies() {\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  return moviesList.length;\n}\n\nfunction getNumberMoviesToReachGoal() {\n  const daysLeft = getDaysLeft();\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  const moviesSoFar = moviesList.length;\n  const moviesLeft = 365 - moviesSoFar;\n  const rate = moviesLeft / daysLeft;\n  return rate.toFixed(3);\n}\n\nfunction sortByYear() {\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  return moviesList.sort((a, b) => a.Year > b.Year ? 1 : -1);\n}\n\nfunction sortByTitle() {\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  return moviesList.sort((a, b) => a.Title > b.Title ? 1 : -1);\n}\n\nfunction getDecadeCounts() {\n  const decadeCounts = {\n    1900: 0,\n    1910: 0,\n    1920: 0,\n    1930: 0,\n    1940: 0,\n    1950: 0,\n    1960: 0,\n    1970: 0,\n    1980: 0,\n    1990: 0,\n    2000: 0,\n    2010: 0,\n    2020: 0\n  };\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  moviesList.forEach(movie => {\n    if (movie.Year >= 1900 && movie.Year <= 1909) {\n      decadeCounts['1900'] += 1;\n    } else if (movie.Year >= 1910 && movie.Year <= 1919) {\n      decadeCounts['1910'] += 1;\n    } else if (movie.Year >= 1920 && movie.Year <= 1929) {\n      decadeCounts['1920'] += 1;\n    } else if (movie.Year >= 1930 && movie.Year <= 1939) {\n      decadeCounts['1930'] += 1;\n    } else if (movie.Year >= 1940 && movie.Year <= 1949) {\n      decadeCounts['1940'] += 1;\n    } else if (movie.Year >= 1950 && movie.Year <= 1959) {\n      decadeCounts['1950'] += 1;\n    } else if (movie.Year >= 1960 && movie.Year <= 1969) {\n      decadeCounts['1960'] += 1;\n    } else if (movie.Year >= 1970 && movie.Year <= 1979) {\n      decadeCounts['1970'] += 1;\n    } else if (movie.Year >= 1980 && movie.Year <= 1989) {\n      decadeCounts['1980'] += 1;\n    } else if (movie.Year >= 1990 && movie.Year <= 1999) {\n      decadeCounts['1990'] += 1;\n    } else if (movie.Year >= 2000 && movie.Year <= 2009) {\n      decadeCounts['2000'] += 1;\n    } else if (movie.Year >= 2010 && movie.Year <= 2019) {\n      decadeCounts['2010'] += 1;\n    } else if (movie.Year >= 2020 && movie.Year <= 2029) {\n      decadeCounts['2020'] += 1;\n    }\n  });\n  return decadeCounts;\n}\n\nfunction getYearsList() {\n  const yearsList = [];\n  const moviesList = sortByYear();\n  moviesList.forEach(movie => {\n    const year = yearsList.find(year => {\n      return year.Year === movie.Year;\n    });\n\n    if (year) {\n      year.Total += 1;\n    } else {\n      const newYearObject = {\n        Year: movie.Year,\n        Total: 1\n      };\n      yearsList.push(newYearObject);\n    }\n  });\n  return yearsList;\n}\n\nfunction sortYearsByMoviesWatched() {\n  const numbersByYear = getYearsList(); // const arrayOfEntries = Object.entries(numbersByYear);\n\n  return numbersByYear.sort((a, b) => a.Total > b.Total ? 1 : -1);\n}\n\nexport { sortByYear, sortByTitle, sortYearsByMoviesWatched, getYearsList, getDaysLeft, getNumberMovies, getNumberMoviesToReachGoal };","map":{"version":3,"sources":["/Users/colinshovlin/WebstormProjects/horror-movie-binge-2020/src/services/movieListHelpers.tsx"],"names":["Movies","getDaysLeft","CurrentDate","Date","TDay","timeDiff","millisecondsPerDay","DayCount","Math","round","getNumberMovies","MoviesResponse","moviesList","length","getNumberMoviesToReachGoal","daysLeft","moviesSoFar","moviesLeft","rate","toFixed","sortByYear","sort","a","b","Year","sortByTitle","Title","getDecadeCounts","decadeCounts","forEach","movie","getYearsList","yearsList","year","find","Total","newYearObject","push","sortYearsByMoviesWatched","numbersByYear"],"mappings":"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","sourcesContent":["import Movies from \"../data/movies.json\";\nimport {DecadesObject, MovieObject, MoviesList, YearObject} from \"../models/movieModels\";\n\nfunction getDaysLeft(): number {\n    const CurrentDate = new Date();\n    const TDay = new Date(2020, 11, 31);\n    // @ts-ignore\n    const timeDiff = TDay - CurrentDate;\n    const millisecondsPerDay = 1000*60*60*24;\n    const DayCount = timeDiff / millisecondsPerDay;\n    return Math.round(DayCount);\n}\n\nfunction getNumberMovies(): number {\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n    return moviesList.length;\n}\n\nfunction getNumberMoviesToReachGoal(): string {\n    const daysLeft = getDaysLeft();\n\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n    const moviesSoFar = moviesList.length;\n    const moviesLeft = 365 - moviesSoFar;\n    const rate = moviesLeft/daysLeft;\n\n    return rate.toFixed(3);\n}\n\nfunction sortByYear(): MovieObject[]{\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n    return moviesList.sort((a: MovieObject, b: MovieObject) => (a.Year > b.Year) ? 1 : -1);\n}\n\nfunction sortByTitle(): MovieObject[] {\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n    return moviesList.sort((a: MovieObject, b: MovieObject) => (a.Title > b.Title) ? 1 : -1);\n}\n\nfunction getDecadeCounts(): DecadesObject {\n\n    const decadeCounts: DecadesObject = {\n        1900: 0,\n        1910: 0,\n        1920: 0,\n        1930: 0,\n        1940: 0,\n        1950: 0,\n        1960: 0,\n        1970: 0,\n        1980: 0,\n        1990: 0,\n        2000: 0,\n        2010: 0,\n        2020: 0\n    };\n\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n\n    moviesList.forEach((movie) => {\n       if (movie.Year >= 1900 && movie.Year <= 1909) {\n            decadeCounts['1900'] += 1;\n       } else if (movie.Year >= 1910 && movie.Year <= 1919) {\n           decadeCounts['1910'] += 1;\n       } else if (movie.Year >= 1920 && movie.Year <= 1929) {\n           decadeCounts['1920'] += 1;\n       } else if (movie.Year >= 1930 && movie.Year <= 1939) {\n           decadeCounts['1930'] += 1;\n       } else if (movie.Year >= 1940 && movie.Year <= 1949) {\n           decadeCounts['1940'] += 1;\n       } else if (movie.Year >= 1950 && movie.Year <= 1959) {\n           decadeCounts['1950'] += 1;\n       } else if (movie.Year >= 1960 && movie.Year <= 1969) {\n           decadeCounts['1960'] += 1;\n       } else if (movie.Year >= 1970 && movie.Year <= 1979) {\n           decadeCounts['1970'] += 1;\n       } else if (movie.Year >= 1980 && movie.Year <= 1989) {\n           decadeCounts['1980'] += 1;\n       } else if (movie.Year >= 1990 && movie.Year <= 1999) {\n           decadeCounts['1990'] += 1;\n       } else if (movie.Year >= 2000 && movie.Year <= 2009) {\n           decadeCounts['2000'] += 1;\n       } else if (movie.Year >= 2010 && movie.Year <= 2019) {\n           decadeCounts['2010'] += 1;\n       } else if (movie.Year >= 2020 && movie.Year <= 2029) {\n           decadeCounts['2020'] += 1;\n       }\n    });\n\n\n    return decadeCounts;\n\n}\n\n\nfunction getYearsList(): YearObject[] {\n    const yearsList: YearObject[] = [];\n\n    const moviesList: MovieObject[] = sortByYear();\n\n    moviesList.forEach((movie: MovieObject) => {\n        const year = yearsList.find(((year: YearObject) => {return year.Year === movie.Year}));\n\n        if(year) {\n            year.Total += 1;\n        } else {\n           const newYearObject: YearObject = {\n               Year: movie.Year,\n               Total: 1\n           } ;\n           yearsList.push(newYearObject);\n        }\n    });\n\n    return yearsList;\n}\n\nfunction sortYearsByMoviesWatched() {\n    const numbersByYear: YearObject[] = getYearsList();\n\n    // const arrayOfEntries = Object.entries(numbersByYear);\n\n    return numbersByYear.sort((a: YearObject,b:YearObject) => (a.Total > b.Total) ? 1 : -1);\n}\n\n\n\nexport {sortByYear, sortByTitle, sortYearsByMoviesWatched, getYearsList, getDaysLeft, getNumberMovies, getNumberMoviesToReachGoal};\n"]},"metadata":{},"sourceType":"module"}