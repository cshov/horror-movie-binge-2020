{"ast":null,"code":"import Movies from \"../data/movies.json\";\n\nfunction getDaysLeft() {\n  const CurrentDate = new Date();\n  const TDay = new Date(2020, 11, 31); // @ts-ignore\n\n  const timeDiff = TDay - CurrentDate;\n  const millisecondsPerDay = 1000 * 60 * 60 * 24;\n  const DayCount = timeDiff / millisecondsPerDay;\n  return Math.round(DayCount);\n}\n\nfunction getNumberMovies() {\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  return moviesList.length;\n}\n\nfunction getNumberMoviesToReachGoal() {\n  const daysLeft = getDaysLeft();\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  const moviesSoFar = moviesList.length;\n  const moviesLeft = 365 - moviesSoFar;\n  const rate = moviesLeft / daysLeft;\n  return rate.toFixed(3);\n}\n\nfunction sortByYear() {\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  return moviesList.sort((a, b) => a.Year > b.Year ? 1 : -1);\n}\n\nfunction sortByTitle() {\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  return moviesList.sort((a, b) => a.Title > b.Title ? 1 : -1);\n}\n\nfunction getDecadeCounts() {\n  const decadeCounts = [{\n    Decade: '1910s',\n    Total: 0\n  }, {\n    Decade: '1920s',\n    Total: 0\n  }, {\n    Decade: '1930s',\n    Total: 0\n  }, {\n    Decade: '1940s',\n    Total: 0\n  }, {\n    Decade: '1950s',\n    Total: 0\n  }, {\n    Decade: '1960s',\n    Total: 0\n  }, {\n    Decade: '1970s',\n    Total: 0\n  }, {\n    Decade: '1980s',\n    Total: 0\n  }, {\n    Decade: '1990s',\n    Total: 0\n  }, {\n    Decade: '2000s',\n    Total: 0\n  }, {\n    Decade: '2010s',\n    Total: 0\n  }, {\n    Decade: '2020s',\n    Total: 0\n  }];\n  const MoviesResponse = Movies;\n  const moviesList = MoviesResponse.Movies;\n  moviesList.forEach(movie => {\n    if (movie.Year >= 1920 && movie.Year <= 1929) {}\n  });\n  return decadeCounts;\n}\n\nfunction getYearsList() {\n  const yearsList = [];\n  const moviesList = sortByYear();\n  moviesList.forEach(movie => {\n    const year = yearsList.find(year => {\n      return year.Year === movie.Year;\n    });\n\n    if (year) {\n      year.Total += 1;\n    } else {\n      const newYearObject = {\n        Year: movie.Year,\n        Total: 1\n      };\n      yearsList.push(newYearObject);\n    }\n  });\n  return yearsList;\n}\n\nfunction sortYearsByMoviesWatched() {\n  const numbersByYear = getYearsList(); // const arrayOfEntries = Object.entries(numbersByYear);\n\n  return numbersByYear.sort((a, b) => a.Total > b.Total ? 1 : -1);\n}\n\nexport { sortByYear, sortByTitle, sortYearsByMoviesWatched, getYearsList, getDaysLeft, getNumberMovies, getNumberMoviesToReachGoal };","map":{"version":3,"sources":["/Users/colinshovlin/WebstormProjects/horror-movie-binge-2020/src/services/movieListHelpers.tsx"],"names":["Movies","getDaysLeft","CurrentDate","Date","TDay","timeDiff","millisecondsPerDay","DayCount","Math","round","getNumberMovies","MoviesResponse","moviesList","length","getNumberMoviesToReachGoal","daysLeft","moviesSoFar","moviesLeft","rate","toFixed","sortByYear","sort","a","b","Year","sortByTitle","Title","getDecadeCounts","decadeCounts","Decade","Total","forEach","movie","getYearsList","yearsList","year","find","newYearObject","push","sortYearsByMoviesWatched","numbersByYear"],"mappings":"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","sourcesContent":["import Movies from \"../data/movies.json\";\nimport {DecadeObject, MovieObject, MoviesList, YearObject} from \"../models/movieModels\";\n\nfunction getDaysLeft(): number {\n    const CurrentDate = new Date();\n    const TDay = new Date(2020, 11, 31);\n    // @ts-ignore\n    const timeDiff = TDay - CurrentDate;\n    const millisecondsPerDay = 1000*60*60*24;\n    const DayCount = timeDiff / millisecondsPerDay;\n    return Math.round(DayCount);\n}\n\nfunction getNumberMovies(): number {\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n    return moviesList.length;\n}\n\nfunction getNumberMoviesToReachGoal(): string {\n    const daysLeft = getDaysLeft();\n\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n    const moviesSoFar = moviesList.length;\n    const moviesLeft = 365 - moviesSoFar;\n    const rate = moviesLeft/daysLeft;\n\n    return rate.toFixed(3);\n}\n\nfunction sortByYear(): MovieObject[]{\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n    return moviesList.sort((a: MovieObject, b: MovieObject) => (a.Year > b.Year) ? 1 : -1);\n}\n\nfunction sortByTitle(): MovieObject[] {\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n    return moviesList.sort((a: MovieObject, b: MovieObject) => (a.Title > b.Title) ? 1 : -1);\n}\n\nfunction getDecadeCounts(): DecadeObject[] {\n\n    const decadeCounts: DecadeObject[] = [\n        {Decade: '1910s', Total: 0 },\n        {Decade: '1920s', Total: 0 },\n        {Decade: '1930s', Total: 0 },\n        {Decade: '1940s', Total: 0 },\n        {Decade: '1950s', Total: 0 },\n        {Decade: '1960s', Total: 0 },\n        {Decade: '1970s', Total: 0 },\n        {Decade: '1980s', Total: 0 },\n        {Decade: '1990s', Total: 0 },\n        {Decade: '2000s', Total: 0 },\n        {Decade: '2010s', Total: 0 },\n        {Decade: '2020s', Total: 0 }\n    ];\n\n    const MoviesResponse: MoviesList = Movies;\n    const moviesList: MovieObject[] = MoviesResponse.Movies;\n\n    moviesList.forEach((movie) => {\n       if (movie.Year >= 1920 && movie.Year <= 1929) {\n\n       }\n    });\n\n\n    return decadeCounts;\n\n}\n\n\nfunction getYearsList(): YearObject[] {\n    const yearsList: YearObject[] = [];\n\n    const moviesList: MovieObject[] = sortByYear();\n\n    moviesList.forEach((movie: MovieObject) => {\n        const year = yearsList.find(((year: YearObject) => {return year.Year === movie.Year}));\n\n        if(year) {\n            year.Total += 1;\n        } else {\n           const newYearObject: YearObject = {\n               Year: movie.Year,\n               Total: 1\n           } ;\n           yearsList.push(newYearObject);\n        }\n    });\n\n    return yearsList;\n}\n\nfunction sortYearsByMoviesWatched() {\n    const numbersByYear: YearObject[] = getYearsList();\n\n    // const arrayOfEntries = Object.entries(numbersByYear);\n\n    return numbersByYear.sort((a: YearObject,b:YearObject) => (a.Total > b.Total) ? 1 : -1);\n}\n\n\n\nexport {sortByYear, sortByTitle, sortYearsByMoviesWatched, getYearsList, getDaysLeft, getNumberMovies, getNumberMoviesToReachGoal};\n"]},"metadata":{},"sourceType":"module"}